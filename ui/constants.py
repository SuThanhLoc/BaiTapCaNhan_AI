# -*- coding: utf-8 -*-
# ui/constants.py
""" Hằng số cho giao diện Pygame """
import pygame as pg

# --- Screen ---
SCREEN_WIDTH = 1100
SCREEN_HEIGHT = 800
WINDOW_TITLE = "8 Puzzle Solver Visualization - 23110371" # Thay bằng MSSV của bạn nếu muốn

# --- Colors ---
COLOR_BACKGROUND = pg.Color("#343A40")
COLOR_TILE = pg.Color("#007BFF")
COLOR_TILE_BORDER = pg.Color("#6C757D")
COLOR_EMPTY_TILE = pg.Color("#495057")
COLOR_TEXT_ON_TILE = pg.Color("#FFFFFF")
COLOR_TEXT_PRIMARY = pg.Color("#F8F9FA")
COLOR_TEXT_SECONDARY = pg.Color("#ADB5BD")
COLOR_TEXT_ACCENT = pg.Color("#0D6EFD")
COLOR_TEXT_ERROR = pg.Color("#DC3545")
COLOR_TEXT_SUCCESS = pg.Color("#198754")
COLOR_BUTTON = pg.Color("#495057")
COLOR_BUTTON_HOVER = pg.Color("#6C757D")
COLOR_BUTTON_SELECTED = pg.Color("#0D6EFD")
COLOR_BUTTON_BELIEF = pg.Color("#FD7E14") # Màu cam cho nút Belief
COLOR_BUTTON_BELIEF_HOVER = pg.Color("#FF9A3C")
COLOR_BUTTON_BELIEF_SELECTED = pg.Color("#E8590C") # Màu cam đậm hơn cho selected
COLOR_BUTTON_DISABLED = pg.Color("#212529")
COLOR_BUTTON_TEXT = pg.Color("#F8F9FA")
COLOR_NAV_BUTTON = pg.Color("#198754")
COLOR_NAV_BUTTON_HOVER = pg.Color("#20A060")
COLOR_BORDER = pg.Color("#6C757D")
COLOR_STATUS_BG = pg.Color("#212529")

# --- Fonts ---
# Khởi tạo font ở đây để dễ quản lý
pg.font.init()
try:
    FONT_MAIN_REGULAR = pg.font.SysFont("Segoe UI", 14)
    FONT_MAIN_BOLD = pg.font.SysFont("Segoe UI", 14, bold=True)
    FONT_MEDIUM = pg.font.SysFont("Segoe UI Semibold", 20)
    FONT_LARGE = pg.font.SysFont("Segoe UI", 36, bold=True)
    FONT_TILE_SMALL = pg.font.SysFont("Arial", 24, bold=True)
    FONT_TILE_LARGE = pg.font.SysFont("Arial", 50, bold=True)
    print("System fonts loaded.")
except Exception as e:
    print(f"System font loading error: {e}. Using fallback pg.font.Font(None, ...).")
    # Sử dụng font mặc định của Pygame nếu font hệ thống không có
    FONT_MAIN_REGULAR = pg.font.Font(None, 20)
    FONT_MAIN_BOLD = pg.font.Font(None, 20) # Pygame font không có bold trực tiếp, dùng size tương tự
    FONT_MEDIUM = pg.font.Font(None, 24)
    FONT_LARGE = pg.font.Font(None, 48)
    FONT_TILE_SMALL = pg.font.Font(None, 30)
    FONT_TILE_LARGE = pg.font.Font(None, 70)

# --- Layout & Size Constants ---
TILE_SIZE_SMALL = 55
TILE_MARGIN_SMALL = 4
GRID_SIZE_SMALL = 3 * TILE_SIZE_SMALL + 2 * TILE_MARGIN_SMALL
TILE_SIZE_LARGE = 120
TILE_MARGIN_LARGE = 8
GRID_SIZE_LARGE = 3 * TILE_SIZE_LARGE + 2 * TILE_MARGIN_LARGE
PUZZLE_BORDER_RADIUS = 8
BUTTON_BORDER_RADIUS = 8
TOP_MARGIN = 20
TITLE_GAP_Y = 15
SECTION_GAP_Y = 30
LABEL_OFFSET_Y = 35 # Khoảng cách từ label đến đầu grid/button column
FRAME_PADDING = 10

# --- Vị trí các thành phần (Tính toán dựa trên các hằng số trên) ---
TITLE_POS_Y = TOP_MARGIN + FONT_LARGE.get_height() // 2
LEFT_PANEL_MARGIN = 40
RIGHT_PANEL_MARGIN = 40

# Panel trái: Start & Goal nhỏ
POS_START_SMALL_X = LEFT_PANEL_MARGIN
POS_GOAL_SMALL_X = LEFT_PANEL_MARGIN
LEFT_PANEL_START_Y = TITLE_POS_Y + FONT_LARGE.get_height() // 2 + TITLE_GAP_Y
POS_START_SMALL_Y = LEFT_PANEL_START_Y + LABEL_OFFSET_Y
POS_GOAL_SMALL_Y = POS_START_SMALL_Y + GRID_SIZE_SMALL + SECTION_GAP_Y + LABEL_OFFSET_Y

# Panel giữa: Puzzle lớn & Nav buttons
POS_PATH_LARGE_X = LEFT_PANEL_MARGIN + GRID_SIZE_SMALL + SECTION_GAP_Y
POS_PATH_LARGE_Y = LEFT_PANEL_START_Y + LABEL_OFFSET_Y # Ngang hàng với Start nhỏ
PUZZLE_CENTER_X = POS_PATH_LARGE_X + GRID_SIZE_LARGE // 2

NAV_BUTTON_WIDTH = 100
NAV_BUTTON_HEIGHT = 40
NAV_BUTTON_GAP_X = 30
TOTAL_NAV_WIDTH = NAV_BUTTON_WIDTH * 2 + NAV_BUTTON_GAP_X
POS_PREV_X = PUZZLE_CENTER_X - TOTAL_NAV_WIDTH // 2
POS_NEXT_X = POS_PREV_X + NAV_BUTTON_WIDTH + NAV_BUTTON_GAP_X
NAV_BUTTON_Y = POS_PATH_LARGE_Y + GRID_SIZE_LARGE + SECTION_GAP_Y # Dưới puzzle lớn

# Panel phải: Các nút thuật toán
ALGO_BUTTON_WIDTH = 110
ALGO_BUTTON_HEIGHT = 35
BUTTON_GAP_Y = 10
RIGHT_PANEL_START_X = POS_PATH_LARGE_X + GRID_SIZE_LARGE + SECTION_GAP_Y
RIGHT_PANEL_WIDTH = SCREEN_WIDTH - RIGHT_PANEL_START_X - RIGHT_PANEL_MARGIN
BUTTON_COLUMN_CENTER_X = RIGHT_PANEL_START_X + RIGHT_PANEL_WIDTH // 2
ALGO_BUTTON_X = BUTTON_COLUMN_CENTER_X - ALGO_BUTTON_WIDTH // 2
BUTTON_COLUMN_START_Y = POS_PATH_LARGE_Y # Ngang hàng với puzzle lớn

# Status Bar
STATUS_BAR_HEIGHT = 40
STATUS_BAR_Y = SCREEN_HEIGHT - STATUS_BAR_HEIGHT

# --- Danh sách thuật toán cho UI ---
# Phải khớp với key trong dictionary algorithms ở visualization.py
ALGORITHMS_TO_DISPLAY = [
    "DFS", "BFS", "UCS", "Greedy", "A*", "IDDFS",
    "IDA*", "Simple HC", "Steepest HC", "Stochastic HC",
    "Sim Anneal", "Beam Search", "Genetic Algo",
    "Conformant BFS"
]
NUM_ALGO_BUTTONS = len(ALGORITHMS_TO_DISPLAY) # Tự động cập nhật số lượng nút

# --- Tính toán Rect cho các Khung bao quanh ---
# Khung trái
FRAME_LEFT_TOP = POS_START_SMALL_Y - LABEL_OFFSET_Y - FRAME_PADDING
FRAME_LEFT_BOTTOM = POS_GOAL_SMALL_Y + GRID_SIZE_SMALL + FRAME_PADDING
FRAME_LEFT_HEIGHT = FRAME_LEFT_BOTTOM - FRAME_LEFT_TOP
FRAME_LEFT_RECT = pg.Rect(LEFT_PANEL_MARGIN - FRAME_PADDING, FRAME_LEFT_TOP, GRID_SIZE_SMALL + 2 * FRAME_PADDING, FRAME_LEFT_HEIGHT)
# Khung giữa
FRAME_CENTER_TOP = POS_PATH_LARGE_Y - LABEL_OFFSET_Y - FRAME_PADDING
FRAME_CENTER_BOTTOM = POS_PATH_LARGE_Y + GRID_SIZE_LARGE + FRAME_PADDING
FRAME_CENTER_HEIGHT = FRAME_CENTER_BOTTOM - FRAME_CENTER_TOP
FRAME_CENTER_RECT = pg.Rect(POS_PATH_LARGE_X - FRAME_PADDING, FRAME_CENTER_TOP, GRID_SIZE_LARGE + 2 * FRAME_PADDING, FRAME_CENTER_HEIGHT)
# Khung phải
FRAME_RIGHT_TOP = BUTTON_COLUMN_START_Y - FRAME_PADDING
BOTTOM_Y_LAST_ALGO = BUTTON_COLUMN_START_Y + NUM_ALGO_BUTTONS * ALGO_BUTTON_HEIGHT + max(0, NUM_ALGO_BUTTONS - 1) * BUTTON_GAP_Y
FRAME_RIGHT_BOTTOM = BOTTOM_Y_LAST_ALGO + FRAME_PADDING
FRAME_RIGHT_HEIGHT = FRAME_RIGHT_BOTTOM - FRAME_RIGHT_TOP
FRAME_RIGHT_RECT = pg.Rect(ALGO_BUTTON_X - FRAME_PADDING, FRAME_RIGHT_TOP, ALGO_BUTTON_WIDTH + 2 * FRAME_PADDING, FRAME_RIGHT_HEIGHT)
# Khung điều hướng
FRAME_NAV_TOP = NAV_BUTTON_Y - FRAME_PADDING
FRAME_NAV_BOTTOM = NAV_BUTTON_Y + NAV_BUTTON_HEIGHT + FRAME_PADDING
FRAME_NAV_HEIGHT = FRAME_NAV_BOTTOM - FRAME_NAV_TOP
FRAME_NAV_RECT = pg.Rect(POS_PREV_X - FRAME_PADDING, FRAME_NAV_TOP, TOTAL_NAV_WIDTH + 2 * FRAME_PADDING, FRAME_NAV_HEIGHT)

# --- Animation Timing ---
STEP_DELAY = 100 # ms delay between automatic steps
TILE_ANIMATION_DURATION = 150 # ms for a tile to slide